{
  "name": "Dependency Checker Gradle Plugin",
  "tagline": "Gradle plugin for validating dependency configurations.",
  "body": "# Gradle Dependency Checker Plugin\r\n\r\nA Gradle plugin to assist in validating project dependencies.\r\n\r\n## Install \r\n\r\nBuild script snippet for use in all Gradle versions:\r\n\r\n```groovy\r\nbuildscript {\r\n  repositories {\r\n    maven {\r\n      url \"https://plugins.gradle.org/m2/\"\r\n    }\r\n  }\r\n  dependencies {\r\n    classpath \"gradle.plugin.com.stehno.gradle:dependency-checker:0.2.0\"\r\n  }\r\n}\r\n\r\napply plugin: \"com.stehno.gradle.dependency-checker\"\r\n```\r\n\r\nBuild script snippet for new, incubating, plugin mechanism introduced in Gradle 2.1:\r\n\r\n```groovy\r\nplugins {\r\n  id \"com.stehno.gradle.dependency-checker\" version \"0.2.0\"\r\n}\r\n```\r\n\r\n## Tasks\r\n\r\n### CheckDependencies\r\n\r\nA Task used to validate that the build has no duplicate dependencies - a dependency with the same group and name, but with a different version. The build\r\nwill be failed if any duplications are found.\r\n\r\n#### Configuration\r\n\r\nWithout any configuration changes, the `checkDependencies` task will check all available configurations for duplicate dependencies and fail the build \r\nif it finds any. It will also report all duplicated dependencies in the standard output.\r\n\r\nYou can limit the scope of the dependency checking to a list of specified configurations using the task configuration, as follows:\r\n\r\n```groovy\r\ncheckDependencies {\r\n    configurations = ['compile','runtime']\r\n}\r\n```\r\n\r\nThe above code snippet, when added to your `build.gradle` will limit the dependency checking to the `compile` and `runtime` configurations, all others \r\nwill be ignored.\r\n\r\nYou can easily make your build automatically check the dependencies by adding one or both of the following lines to your `build.gradle` file:\r\n\r\n    tasks.check.dependsOn checkDependencies\r\n    \r\n    tasks.build.dependsOn checkDependencies\r\n    \r\nThis will make `check` and `build` dependent on the `checkDependencies` task so that it will always be run. This is the safest way to integrate\r\nthis plugin into your build, since generally it will be forgotten and not run so that duplication will creep back into your build.\r\n\r\n### CheckAvailability\r\n\r\nTask which will validate your dependencies (deep search) against a specified collection of remote repositories to ensure that they are all available\r\nat those repositories. This is useful in the scenario where your company has its own internal artifact repositiory and you need to determine whether\r\nor not any need to be added to support your project.\r\n\r\n#### Configuration\r\n\r\nThe following configuration properties are available:\r\n\r\n##### `configurations`\r\n\r\nUsed to specify a collection of build configuration names to search for dependencies. If no list is provided, all configurations are searched.\r\n\r\n##### `repoUrls`\r\n\r\nProvides a collection of URL strings for your remote artifact repositories. These repositories must use standard maven directory layout. If no \r\nrepos are provided, the task will silently pass. This property may also be provided on the command line so that the value need not be coded into the \r\nbuild file itself.\r\n\r\n    ./gradlew checkAvailability -PrepoUrls=http://artifacts.mycompany.com/repository\r\n\r\n##### `ignored`\r\n\r\nYou may provide a list of ignored artifact coordinates - these will not be checked against the remote repositories.\r\n\r\n##### `failOnMissing`\r\n\r\nBy default, unavailable dependencies will be listed in the build output; however, if it is desirable to fail the build when artifacts are \r\nunavailable, this may be done by setting `failOnMissing = true`. The dependencies will be checked and a list of all failures will be provided before\r\nthe build is failed.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}